name: CMS Check.  If changes detected, Deploy new image

on:
  workflow_call:
    secrets:
      LINUX_SSH_PRIVATE_KEY:
        required: true
      LINUX_USER_DEVOPS:
        required: true
      LINUX_SERVER_IP:
        required: true
      GHPAT_021425_CICD_GHCR_REPO_WORKFLOW_WRDPACKAGES:
        required: true
      WAGTAIL__SECRET_ENV_FILE:
        required: true
    outputs:
      had_changes:
        description: "Whether changes were detected"
        value: ${{ jobs.job-deploy--cms.outputs.changes_detected }}
      action_taken:
        description: "Action taken during deployment"
        value: ${{ jobs.job-deploy--cms.outputs.action }}
      changed_files:
        description: "List of files that were changed"
        value: ${{ jobs.job-deploy--cms.outputs.changed_files }}

jobs:
  job-deploy--cms:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write  # Needed for artifact operations
    outputs:
      changes_detected: ${{ steps.check-changes.outputs.changes }}
      action: ${{ steps.step-deploy--cms.outputs.action_taken }}
      changed_files: ${{ steps.changed-files.outputs.files }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history needed for better change detection

      # Setup GitHub CLI for artifact operations
      - name: Setup GitHub CLI
        run: |
          echo "Setting up GitHub CLI authentication..."
          echo ${{ github.token }} | gh auth login --with-token

      # Download last successful deployment marker if it exists
      - name: Download last successful deployment marker
        id: download-marker
        continue-on-error: true  # Continue if no marker exists yet
        run: |
          mkdir -p ./deployment-markers
          
          # Try to download the artifact using the GitHub CLI
          echo "Attempting to download latest cms-last-deployed-commit artifact..."
          gh run download --name cms-last-deployed-commit --dir ./deployment-markers --repo ${{ github.repository }} || echo "⚠️ No previous deployment marker found or download failed"
          
          # Check if the download was successful
          if [ -f "./deployment-markers/last-cms-commit.txt" ]; then
            echo "✅ Successfully downloaded previous deployment marker"
          else
            # List available artifacts for debugging
            echo "Available artifacts:"
            gh artifact list --repo ${{ github.repository }} | grep -i cms || echo "No matching artifacts found"
          fi

      # Determine last deployed commit hash
      - name: Get last deployed commit hash
        id: get-last-commit
        run: |
          if [ -f "./deployment-markers/last-cms-commit.txt" ]; then
            LAST_COMMIT=$(cat ./deployment-markers/last-cms-commit.txt)
            echo "Last successfully deployed CMS commit: $LAST_COMMIT"
            echo "last_commit=$LAST_COMMIT" >> $GITHUB_OUTPUT
          else
            # If no marker exists, get a commit far back enough to capture all changes
            # This will trigger a build on first run
            LAST_COMMIT=$(git rev-list --max-parents=0 HEAD)
            echo "No previous deployment marker found. Using initial commit: $LAST_COMMIT"
            echo "last_commit=$LAST_COMMIT" >> $GITHUB_OUTPUT
          fi

      - name: Check CMS Directory Changes
        id: check-changes
        run: |
          echo "Checking for code changes in CMS directory since last deployment..."
          
          # Debug: Show the commit we're comparing against
          echo "Comparing current commit with: ${{ steps.get-last-commit.outputs.last_commit }}"
          
          # List files in wagtail directory without showing content
          echo "Files in wagtail directory (names only):"
          ls -la ./wagtail_cms_portfolio2025 | grep -v "^total"
            
          # Check for changes between last deployed commit and current HEAD
          # Only show file names, not content
          CHANGES=$(git diff --name-only ${{ steps.get-last-commit.outputs.last_commit }} HEAD -- ./wagtail_cms_portfolio2025)
          
          if [ -z "$CHANGES" ]; then
            echo "No changes detected in wagtail_cms_portfolio2025 directory since last deployment"
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in wagtail_cms_portfolio2025 directory since last deployment:"
            # Only show file names that changed, not their content
            echo "$CHANGES"
            echo "changes=true" >> $GITHUB_OUTPUT
            
            # Save changed files list to be accessed by the deployment summary
            echo "$CHANGES" > ./cms-changed-files.txt
          fi

      # Save changed files to an output instead of using artifacts
      - name: Set changed files as output
        if: steps.check-changes.outputs.changes == 'true'
        id: changed-files
        run: |
          # Replace newlines with special marker that can be converted back in summary
          CHANGED_FILES=$(cat ./cms-changed-files.txt | tr '\n' '###' | sed 's/"/\\"/g')
          echo "files=$CHANGED_FILES" >> $GITHUB_OUTPUT

      - name: Install YQ
        run: |
          wget https://github.com/mikefarah/yq/releases/download/v4.34.1/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Load Environment Defaults
        id: env-defaults
        run: |
          # Extract Wagtail environment variables from defaults file
          WAGTAIL_DEFAULTS=$(yq e '.wagtail_defaults' .github/defaults/env-defaults.yml)
          echo "$WAGTAIL_DEFAULTS" > ./wagtail_cms_portfolio2025/.env-wagtail-prod.env

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHPAT_021425_CICD_GHCR_REPO_WORKFLOW_WRDPACKAGES }}

      - name: Build & Publish image
        id: build-publish
        if: steps.check-changes.outputs.changes == 'true'
        run: |
          echo "Building updated Wagtail CMS Docker image..."
          
          # Build the Wagtail CMS Docker image with env file
          docker build \
            --build-arg ENV_FILE=.env-wagtail-prod.env \
            -t ghcr.io/pmeaney/wagtail-prod-wnp-portfolio-2025:latest \
            ./wagtail_cms_portfolio2025
          
          # Push the Docker image to GitHub Container Registry
          docker push ghcr.io/pmeaney/wagtail-prod-wnp-portfolio-2025:latest
          
          # Clean up
          rm ./wagtail_cms_portfolio2025/.env-wagtail-prod.env
          
          echo "BUILT=true" >> $GITHUB_ENV
          echo "PUSHED=true" >> $GITHUB_ENV
          echo "build_status=success" >> $GITHUB_OUTPUT

      - name: SSH in and Deploy Updated CMS image
        id: step-deploy--cms
        env:
          SSH_KEY: ${{ secrets.LINUX_SSH_PRIVATE_KEY }}
          SSH_USER: ${{ secrets.LINUX_USER_DEVOPS }}
          SERVER_IP: ${{ secrets.LINUX_SERVER_IP }}
          GHPAT: ${{ secrets.GHPAT_021425_CICD_GHCR_REPO_WORKFLOW_WRDPACKAGES }}
          WAGTAIL_ENV: ${{ secrets.WAGTAIL__SECRET_ENV_FILE }}
        run: |
          # Debug environment variables
          echo "Debug - Checking if variables are set:"
          echo "SSH_USER is set: $(if [ -n "$SSH_USER" ]; then echo "YES"; else echo "NO"; fi)"
          echo "SERVER_IP is set: $(if [ -n "$SERVER_IP" ]; then echo "YES"; else echo "NO"; fi)"
          echo "GHPAT is set: $(if [ -n "$GHPAT" ]; then echo "YES"; else echo "NO"; fi)"
          echo "WAGTAIL_ENV is set: $(if [ -n "$WAGTAIL_ENV" ]; then echo "YES"; else echo "NO"; fi)"
          

          # Setup SSH - simplified approach
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          
          # Create SSH config with direct variable expansion
          cat > ~/.ssh/config << EOF
          Host prod
            HostName $SERVER_IP
            User $SSH_USER
            IdentityFile ~/.ssh/id_ed25519
            StrictHostKeyChecking no
          EOF

          # Verify connection to server with simple commands
          echo "Verifying server connection..."
          ssh prod "hostname && which docker && /usr/bin/docker ps -a && uptime"

          if [[ "${{ steps.check-changes.outputs.changes }}" == "true" ]]; then
            # First authenticate with GHCR on the remote server
            echo "Authenticating with GitHub Container Registry on remote server..."
            ssh prod "echo '$GHPAT' | docker login ghcr.io -u ${{ github.actor }} --password-stdin"
            
            # Create a temporary env file on the remote server
            echo "Creating temporary environment file..."
            ssh prod "echo '$WAGTAIL_ENV' > /tmp/wagtail-env-file.env"
            ssh prod "cat /tmp/wagtail-env-file.env"
            # Deploy using docker run with network connection and environment file
            ssh prod "docker pull ghcr.io/pmeaney/wagtail-prod-wnp-portfolio-2025:latest && \
                      docker rm -f wagtail-prod-wnp-portfolio-2025 || true && \
                      docker run -d \
                        --name wagtail-prod-wnp-portfolio-2025 \
                        --network main-network--npm020325 \
                        --env-file /tmp/wagtail-env-file.env \
                        ghcr.io/pmeaney/wagtail-prod-wnp-portfolio-2025:latest"
            
            # Remove the temporary env file for security
            echo "Removing temporary environment file..."
            ssh prod "rm /tmp/wagtail-env-file.env"
            
            echo "Deploying new CMS version..."
            echo "action_taken=New version deployed" >> $GITHUB_OUTPUT
            echo "deploy_status=success" >> $GITHUB_ENV
          else
            echo "No changes detected, skipping deployment"
            echo "action_taken=No deployment needed" >> $GITHUB_OUTPUT
          fi

      # Save deployment marker if deploy was successful
      - name: Save deployment marker
        if: steps.check-changes.outputs.changes == 'true' && env.deploy_status == 'success'
        run: |
          mkdir -p ./deployment-markers
          git rev-parse HEAD > ./deployment-markers/last-cms-commit.txt
          echo "Saved current commit as last deployed commit marker"

      # Upload the marker as an artifact
      - name: Upload deployment marker
        if: steps.check-changes.outputs.changes == 'true' && env.deploy_status == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: cms-last-deployed-commit
          path: ./deployment-markers/last-cms-commit.txt
          retention-days: 90

      - name: Status Report
        run: |
          echo "CMS Deployment Status:"
          echo "Changes Detected: ${{ steps.check-changes.outputs.changes }}"
          echo "Action Taken: ${{ steps.step-deploy--cms.outputs.action_taken }}"