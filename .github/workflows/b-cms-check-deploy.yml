name: CMS Check and Deploy Simulation

on:
  workflow_call:
    secrets:
      LINUX_SSH_PRIVATE_KEY:
        required: true
      LINUX_USER_DEVOPS:
        required: true
      LINUX_SERVER_IP:
        required: true
      GHPAT_021425_CICD_GHCR_REPO_WORKFLOW_WRDPACKAGES:
        required: true
    outputs:
      had_changes:
        description: "Whether changes were detected"
        value: ${{ jobs.cms-deploy.outputs.changes_detected }}
      action_taken:
        description: "Action taken during deployment"
        value: ${{ jobs.cms-deploy.outputs.action }}

jobs:
  cms-deploy:
    runs-on: ubuntu-latest
    outputs:
      changes_detected: ${{ steps.check-changes.outputs.changes }}
      action: ${{ steps.deploy--cms.outputs.action_taken }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history needed for better change detection

      # Download last successful deployment marker if it exists
      - name: Download last successful deployment marker
        id: download-marker
        continue-on-error: true  # Continue if no marker exists yet
        uses: actions/download-artifact@v4
        with:
          name: cms-last-deployed-commit
          path: ./deployment-markers

      # Determine last deployed commit hash
      - name: Get last deployed commit hash
        id: get-last-commit
        run: |
          if [ -f "./deployment-markers/last-cms-commit.txt" ]; then
            LAST_COMMIT=$(cat ./deployment-markers/last-cms-commit.txt)
            echo "Last successfully deployed CMS commit: $LAST_COMMIT"
            echo "last_commit=$LAST_COMMIT" >> $GITHUB_OUTPUT
          else
            # If no marker exists, get a commit far back enough to capture all changes
            # This will trigger a build on first run
            LAST_COMMIT=$(git rev-list --max-parents=0 HEAD)
            echo "No previous deployment marker found. Using initial commit: $LAST_COMMIT"
            echo "last_commit=$LAST_COMMIT" >> $GITHUB_OUTPUT
          fi

      - name: Check CMS Directory Changes
        id: check-changes
        run: |
          echo "Checking for code changes in CMS directory since last deployment..."
          
          # Check for changes between last deployed commit and current HEAD
          CHANGES=$(git diff --name-only ${{ steps.get-last-commit.outputs.last_commit }} HEAD -- ./wagtail_cms_portfolio2025)
          
          if [ -z "$CHANGES" ]; then
            echo "No changes detected in wagtail_cms_portfolio2025 directory since last deployment"
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in wagtail_cms_portfolio2025 directory since last deployment:"
            echo "$CHANGES"
            echo "changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Install YQ
        run: |
          wget https://github.com/mikefarah/yq/releases/download/v4.34.1/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Load Environment Defaults
        id: env-defaults
        run: |
          # Extract Wagtail environment variables from defaults file
          WAGTAIL_DEFAULTS=$(yq e '.wagtail_defaults' .github/defaults/env-defaults.yml)
          echo "$WAGTAIL_DEFAULTS" > ./wagtail_cms_portfolio2025/.env-wagtail-prod.env

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHPAT_021425_CICD_GHCR_REPO_WORKFLOW_WRDPACKAGES }}

      - name: Build & Publish image
        id: build-publish
        if: steps.check-changes.outputs.changes == 'true'
        run: |
          echo "Building updated Wagtail CMS Docker image..."
          
          # Build the Wagtail CMS Docker image with env file
          docker build \
            --build-arg ENV_FILE=.env-wagtail-prod.env \
            -t ghcr.io/pmeaney/wagtail-prod-wnp-portfolio-2025:latest \
            ./wagtail_cms_portfolio2025
          
          # Push the Docker image to GitHub Container Registry
          docker push ghcr.io/pmeaney/wagtail-prod-wnp-portfolio-2025:latest
          
          # Clean up
          rm ./wagtail_cms_portfolio2025/.env-wagtail-prod.env
          
          echo "BUILT=true" >> $GITHUB_ENV
          echo "PUSHED=true" >> $GITHUB_ENV
          echo "build_status=success" >> $GITHUB_OUTPUT

      - name: SSH in and Deploy Updated CMS image
        id: deploy--cms
        env:
          SSH_KEY: ${{ secrets.LINUX_SSH_PRIVATE_KEY }}
          SSH_USER: ${{ secrets.LINUX_USER_DEVOPS }}
          SERVER_IP: ${{ secrets.LINUX_SERVER_IP }}
        run: |
          # Debug environment variables
          echo "Debug - Checking if variables are set:"
          echo "SSH_USER is set: $(if [ -n "$SSH_USER" ]; then echo "YES"; else echo "NO"; fi)"
          echo "SERVER_IP is set: $(if [ -n "$SERVER_IP" ]; then echo "YES"; else echo "NO"; fi)"

          # Setup SSH
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          cat >>~/.ssh/config <<END
          Host prod
            HostName $SERVER_IP
            User $SSH_USER
            IdentityFile ~/.ssh/id_ed25519
            StrictHostKeyChecking no
          END

          ssh prod << EOF
          set -e

          cd ~

          # Verify connection to server
          echo "Remote hostname: $(hostname)"
          echo "Docker path: $(which docker)"
          /usr/bin/docker ps -a

          # Check server uptime
          echo "Remote server uptime: $(uptime)"

          # Force a login shell environment
          export PATH=/usr/bin:/bin:/usr/local/bin:/sbin:/usr/sbin:\$PATH
          echo "Current PATH: ${PATH}"
          EOF

          if [[ "${{ steps.check-changes.outputs.changes }}" == "true" ]]; then
            # Deploy using docker run with network connection
            ssh prod "docker pull ghcr.io/pmeaney/wagtail-prod-wnp-portfolio-2025:latest && \
                      docker rm -f wagtail-prod-wnp-portfolio-2025 || true && \
                      docker run -d \
                        --name wagtail-prod-wnp-portfolio-2025 \
                        --network main-network--npm020325 \
                        ghcr.io/pmeaney/wagtail-prod-wnp-portfolio-2025:latest"
            
            echo "Deploying new CMS version..."
            echo "action_taken=New version deployed" >> $GITHUB_OUTPUT
            echo "deploy_status=success" >> $GITHUB_ENV
          else
            echo "No changes detected, skipping deployment"
            echo "action_taken=No deployment needed" >> $GITHUB_OUTPUT
          fi

      # Save deployment marker if deploy was successful
      - name: Save deployment marker
        if: steps.check-changes.outputs.changes == 'true' && env.deploy_status == 'success'
        run: |
          mkdir -p ./deployment-markers
          git rev-parse HEAD > ./deployment-markers/last-cms-commit.txt
          echo "Saved current commit as last deployed commit marker"

      - name: Upload deployment marker
        if: steps.check-changes.outputs.changes == 'true' && env.deploy_status == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: cms-last-deployed-commit
          path: ./deployment-markers/last-cms-commit.txt
          retention-days: 90

      - name: Status Report
        run: |
          echo "CMS Deployment Status:"
          echo "Changes Detected: ${{ steps.check-changes.outputs.changes }}"
          echo "Action Taken: ${{ steps.deploy--cms.outputs.action_taken }}"